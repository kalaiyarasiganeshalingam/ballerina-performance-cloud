name: mysql_insertion

on:
  workflow_dispatch:
  repository_dispatch:
    types: [ mysql_insertion ]
jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 1
      matrix:
        payload: [50, 1024]
        users: [60, 200]
    env:
      TEST_NAME: "mysql_insertion"
      TEST_ROOT: "tests"
    steps:
      - uses: actions/checkout@v2
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      - name: Ballerina Build
        uses: ballerina-platform/ballerina-action@nightly
        env:
          CI_BUILD: true
          WORKING_DIR: tests/mysql_insertion
        with:
          args:
            build
      - name: Docker push
        run: docker push ballerina/${TEST_NAME}:latest
      - name: Copy artifacts
        run: |
          ls -ltr
          cp -a ${TEST_ROOT}/${TEST_NAME}/target/kubernetes/${TEST_NAME}/. ${TEST_ROOT}/${TEST_NAME}/deployment/
      - name: 'Install Kustomize'
        run: |
          curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh"  | bash
      - name: 'Run Kustomize'
        run: |
          kustomize build ${TEST_ROOT}/${TEST_NAME}/deployment > ${TEST_ROOT}/${TEST_NAME}/final.yaml
      - name: Configure AKS
        uses: azure/aks-set-context@v1
        with:
          creds: '${{ secrets.AZURE_CREDENTIALS }}'
          cluster-name: ${{ secrets.CLUSTER_NAME }}
          resource-group: ${{ secrets.CLUSTER_RESOURCE_GROUP }}
      - name: Deploy artifacts
        run: |
          kubectl apply -f ${TEST_ROOT}/${TEST_NAME}/final.yaml
      - name: Login via Az module
        uses: azure/login@v1
        with:
          creds: ${{secrets.AZURE_CREDENTIALS}}
      - name: Write values to outputs
        id: write
        run: |
          echo "::set-output name=cluster-ip::$(kubectl get service nginx-ingress-ingress-nginx-controller --namespace ingress-basic -w  \
                                                -o 'go-template={{with .status.loadBalancer.ingress}}{{range .}}{{.ip}}{{"\n"}}{{end}}{{.err}}{{end}}' 2>/dev/null \
                                                | head -n1)"
          echo "::set-output name=scenario-name::${TEST_NAME}"
          echo "::set-output name=vm-name::bal-perf-vm-`echo ${TEST_NAME} | tr '_' '-'`-${{ matrix.users }}-${{ matrix.payload }}-${{ GITHUB.RUN_NUMBER }}"
          echo "::set-output name=git-token::${{ secrets.BALLERINA_BOT_TOKEN }}"
          echo "::set-output name=custom-image-name::$(cat image.txt)"
      - name: Create VM Instance
        id: vminstance
        uses: azure/CLI@v1
        with:
          azcliversion: 2.0.72
          inlineScript: |
            az vm create --resource-group "${{ secrets.CLUSTER_RESOURCE_GROUP }}"  --name "${{ steps.write.outputs.vm-name }}"  --admin-username "${{ secrets.VM_USER }}" --admin-password "${{ secrets.VM_PWD }}" --location  eastus \
            --image "mi_${{ steps.write.outputs.custom-image-name }}" --tags benchmark-number=${{ steps.write.outputs.vm-name }}
            echo "::set-output name=ip-address::$(az vm show -d -g "${{ secrets.CLUSTER_RESOURCE_GROUP }}" -n "${{ steps.write.outputs.vm-name }}" --query publicIps -o tsv)"
      - name: Execute performance tests
        uses: appleboy/ssh-action@master
        env:
          IP: ${{ steps.write.outputs.cluster-ip }}
          SCENARIO_NAME: ${{ steps.write.outputs.scenario-name }}
          GITHUB_TOKEN: ${{steps.write.outputs.git-token}}
          PAYLOAD: ${{ matrix.payload }}
          USERS: ${{ matrix.users }}
        with:
          host: ${{ steps.vminstance.outputs.ip-address }}
          username: ${{ secrets.VM_USER }}
          password: ${{ secrets.VM_PWD }}
          envs: IP,SCENARIO_NAME,GITHUB_TOKEN,PAYLOAD,USERS
          command_timeout: '180m' #3 hours
          script: |
            source /etc/profile.d/10-perf-vm.sh
            execute-tests.sh $IP $SCENARIO_NAME $GITHUB_TOKEN $PAYLOAD $USERS
      - name: Undeploy Kubernetes artifacts
        if: always()
        run: |
          kubectl delete -f ${TEST_ROOT}/${TEST_NAME}/final.yaml
      - name: Cleanup VM
        uses: azure/CLI@v1
        if: always()
        continue-on-error: true
        with:
          azcliversion: 2.0.72
          inlineScript: |
            az resource delete --ids $(az resource list --tag benchmark-number=${{ steps.write.outputs.vm-name }} -otable --query "[].id" -otsv)
            var=`az disk list --query "[?tags.\"benchmark-number\"=='${{ steps.write.outputs.vm-name }}'].id" -otable -otsv`
            if [ -n "$var" ]
            then
                az resource delete --ids ${var}
            else
                echo "Disk is already deleted"
            fi
